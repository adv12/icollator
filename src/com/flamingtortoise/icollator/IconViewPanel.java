/*
 * Copyright (c) 2012 Andrew Vardeman
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package com.flamingtortoise.icollator;
import java.util.Vector;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Color;
import java.awt.Insets;
import java.awt.Dimension;

/**
 *
 * @author  andrewvardeman
 */
public class IconViewPanel extends javax.swing.JPanel implements javax.swing.Scrollable{
    
    /** Creates new form IconViewPanel */
    public IconViewPanel() {
        initComponents();
    }
    
    public void addImageRow(Image[] row){
        images.add(row);
        
        Insets ins = this.getInsets();
        int rowStart = ins.top;
        for(int i = 0; i < images.size(); i++){
            Image[] curRow = (Image[])images.get(i);
            int maxHeight = 0;
            int colStart = ins.left;
            for(int j = 0; j < row.length; j++){
                Image img = curRow[j];
                if(img != null){
                    int height = img.getHeight(null);
                    int width = img.getWidth(null);
                    if(height > maxHeight){
                        maxHeight = height;
                    }
                    colStart += width + 4;
                }
                else{
                    System.err.println("img is null");
                }
            }
            rowStart += maxHeight + 4;
        }
        
        Dimension d = new Dimension(this.getParent().getWidth(),
            rowStart);
        this.setPreferredSize(d);
        this.revalidate();
        repaint();
    }
    
    public void clear(){
        images.clear();
        java.awt.Dimension d = new java.awt.Dimension(this.getParent().getWidth(),
            this.getParent().getHeight());
        this.setPreferredSize(d);
        this.revalidate();
        repaint();
    }
    
    public Image[] getImageRow(int i){
        return (Image[])images.get(i);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    
    
    public void paintComponent(Graphics g){
        g.setColor(this.getBackground());
        g.fillRect(0,0,this.getWidth(),getHeight());
        Insets ins = this.getInsets();
        int rowStart = ins.top;
        for(int i = 0; i < images.size(); i++){
            Image[] row = (Image[])images.get(i);
            int maxHeight = 0;
            int colStart = ins.left;
            for(int j = 0; j < row.length; j++){
                Image img = row[j];
                if(img != null){
                    int height = img.getHeight(null);
                    int width = img.getWidth(null);
                    if(height > maxHeight){
                        maxHeight = height;
                    }
                    g.drawImage(img, colStart, rowStart, null);
                    colStart += width + 4;
                }
            }
            rowStart += maxHeight + 4;
        }
    }
    
    public java.awt.Dimension getPreferredScrollableViewportSize() {
        return this.getPreferredSize();
    }    
    
    public int getScrollableBlockIncrement(java.awt.Rectangle rectangle,
        int param, int param2) {
        return (int)this.getVisibleRect().getHeight();
    }
    
    public boolean getScrollableTracksViewportHeight() {
        return false;
    }
    
    public boolean getScrollableTracksViewportWidth() {
        return true;
    }
    
    public int getScrollableUnitIncrement(java.awt.Rectangle rectangle,
        int param, int param2) {
        return 16;
    }
    
    private Vector images = new Vector();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
}
